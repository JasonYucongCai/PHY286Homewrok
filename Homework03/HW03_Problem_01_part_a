function [  ] = HW03_Problem_01_part_a( x_initial,N,choice,alpha_initial,beta_intial )
%x_initial was the initial xi
%N was the maxmium steps
% choice either 'multi' or 'single' display combiniation or graph or a single graph. 
%single case neeed the additional alpha_initial and beta_intial input

%----------------------------error check-----------------------------------
switch choice
    case 'multi'
        if nargin ~= 3&&nargin ~= 4&&nargin ~= 5
            error('This function requires 3 inputs');
        end
        
    case 'single'
        if nargin ~= 5
            error('This function requires 5 inputs');
        end
    otherwise
        error('see help');
end

%---------------------error check------------------------------------------


n=8;
%a=
for beta=0:1
    for alpha=1:15
        alpha_position=alpha;
        beta_position=beta+1;
        x_step(alpha_position,beta_position,1)=x_initial;
        
        for i=1:N-1
        
        x_step(alpha_position,beta_position,i+1)=mod((alpha*x_step(alpha_position,beta_position,i)*(2^n)+beta),2^n)/(2^n);
        
        end
    end
 
end

x_axis=1:N;




switch choice

    case 'multi'
    
figure (1);
%figure (Number);

for beta_position=1:2;
for alpha=1:15
    
    alpha_position=alpha;
    
    y_axis=x_step(alpha_position,beta_position,:);
    y_axis=reshape(y_axis,1,[]);
    
%subplot arrange 1---------------------------------------------------------
%{
    sub_beta=beta_position;
    if beta_position==2
        sub_beta=1+15;
    end
    %subplot(2,15,sub_beta-1+alpha_position);
    sub_alpha=alpha_position;
    if beta_position==2
        sub_alpha=sub_alpha+1;
    end
    
    subplot(4,8,sub_beta-1+sub_alpha);
%}
%subplot arrange 1---------------------------------------------------------

%subplot arrange 2---------------------------------------------------------
    sub_beta=floor(beta_position/2)*16;
    sub_alpha=mod(alpha_position,2)*8+ceil(alpha_position/2);    
    subplot(4,8,sub_beta+sub_alpha);
    
%subplot arrange 2---------------------------------------------------------




    
    plot(x_axis,y_axis,'-b');%xlabel('Time, t [s]'); ylabel('Angular displacement, \theta [rad]');
    title(sprintf('\\beta = %0.2f, \\alpha = %0.2f', beta_position-1, alpha_position));
    %pause(1);
    %pause(5);
end
end



%{
figure (1)
beta=0;
hold on
for alpha=1:15
    
    alpha_position=alpha;
    beta_position=beta+1;
    y_axis=x_step(alpha_position,beta_position,:);
    y_axis=reshape(y_axis,1,[]);
    plot(x_axis,y_axis,'-b');

end
hold off

figure (2)

beta=1;
hold on
for alpha=1:15

    alpha_position=alpha;
    beta_position=beta+1;
    y_axis=x_step(alpha_position,beta_position,:);
    y_axis=reshape(y_axis,1,[]);
    plot(x_axis,y_axis,'-b');
    
end
hold off
%}
    case 'single'
    
    figure (1)
    %can selet alpha dne beta here;
    beta=beta_intial;
    alpha_position=alpha_initial;
    beta_position=beta+1;
    y_axis=x_step(alpha_position,beta_position,:);
    y_axis=reshape(y_axis,1,[]);
    plot(x_axis,y_axis,'-b');
    title(sprintf('\\beta = %0.2f, \\alpha = %0.2f', beta, alpha_initial));

end


fprintf('It kept constant for alpha =0, so it was not necessary to show it in the funciton.\n');
fprintf('For the practice of programming, only alpha =1:15 was shown.\n');
fprintf('After compare the x_initial=0:0.01:1.\n');
fprintf('When beta =0, alpha=2,4,6,3,7,9,15.\n');
fprintf('When beta =1, alpha=2,4.\n');
fprintf('Was a good approximation.\n');

fprintf('When beta =0, alpha=2,4,6,3,7,9,15.\n');
fprintf('When beta =1, alpha=2,4.\n');
fprintf('Was a good approximation.\n');


fprintf('When beta =0, alpha=10,12,14,1,5,11.\n');
fprintf('When beta =1, alpha=10,12,14,1,3,5,7,9,11,13.\n');
fprintf('Was a bad approximation.\n');
end

